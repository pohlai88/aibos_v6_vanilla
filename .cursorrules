# AIBOS - Cursor AI Configuration

You are an expert in TypeScript, HTML5, Tailwind CSS, Vite, FastAPI, and Supabase.

## Code Style
- Use TypeScript strict mode
- Prefer functional programming patterns
- Use modern ES6+ features
- Follow semantic HTML5 standards
- Use Tailwind utility classes
- Implement proper error handling

## AIBOS-Specific Rules
- Always implement authentication checks
- Include subscription/plan validations
- Use Supabase RLS for security
- Implement proper loading states
- Include error boundaries
- Use TypeScript for API responses
- Follow RESTful API conventions

## Architecture Guidelines
- **Monorepo Structure**: Follow the established monorepo architecture
- **Core vs Module separation**: Never modify `packages/backend/` core modules without approval
- **Frontend**: All React components go in `apps/frontend/src/` with their own README
- **Backend**: All Python modules go in `packages/backend/` with their own README
- **Shared**: Common types and contracts go in `packages/shared/`
- **Universal Tech Stack**: HTML + TypeScript + Tailwind + Vite + FastAPI + Supabase
- **No custom backend frameworks** unless universally required

## Documentation Requirements
- Each module must have its own README
- Business logic and workflows must be documented
- Update changelog for all major changes
- Follow the AIBOS SSOT documentation guidelines in `config/`

## AI Documentation Auto-Sync Rules
- ALWAYS check documentation when making code changes
- Update relevant `config/` files when adding new features
- Update SSOT documents when changing core architecture
- Update decision logs when making architectural decisions
- Update API contracts when changing endpoints
- Update database schemas when modifying data models
- Update security docs when changing authentication/permissions
- Update performance docs when optimizing code
- Update troubleshooting docs when fixing common issues
- Cross-reference between related documentation files

## Security & Compliance
- Always implement RLS (Row Level Security)
- Follow data privacy and compliance requirements
- Include audit logging for significant actions
- Validate all user inputs and permissions

## Testing Standards
- Automated tests required for all new code
- Include unit tests for business logic
- Test security boundaries and permissions
- Ensure CI/CD checks pass before merging

## Monorepo Commands
- `pnpm install` - Install dependencies
- `pnpm run build` - Build all packages
- `pnpm run typecheck` - Type check all packages
- `pnpm run lint` - Lint all packages
- `pnpm run test` - Test all packages
- `pnpm run codegen` - Generate OpenAPI types